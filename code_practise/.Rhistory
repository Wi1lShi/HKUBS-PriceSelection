inter_time <- rexp(700, rate=0.29)
hist(inter_time)
service_time <- rexp(700, rate = 0.2)
hist(service_time)
wtp<-runif(700, 3.46, 10.36) # unifrom distribution
hist(wtp)
d_trans <- function(price){
#length(cumsum(inter_time))
arr_time <- c(0, cumsum(inter_time))
arr_time <- arr_time[-length(arr_time)]
perchase_or_not <- wtp>price
decision_trans <- data.frame(arr_time, perchase_or_not)
# service time
decision_trans$service_interval <- ifelse(decision_trans$perchase_or_not, service_time, 0)
# hist(decision_trans$service_interval)
# service end time，算出service end time
decision_trans$service_end_time <- ifelse(decision_trans$service_interval, decision_trans$arr_time + decision_trans$service_interval, FALSE)
pre_time = 0
for (i in 1:nrow(decision_trans)){
if (decision_trans$service_end_time[i]){
if (decision_trans$service_end_time[i]< pre_time){
decision_trans$service_end_time[i] = pre_time + decision_trans$service_interval[i]
}
pre_time = decision_trans$service_end_time[i]
}
}
# queue length（包括正在service的人）,算queue length，若大于5，则改成no purchase
decision_trans$queue_length <- 0
for (i in 2:nrow(decision_trans)){
for (j in 1:i){
if (decision_trans$perchase_or_not[j]){
if (decision_trans$service_end_time[j] > decision_trans$arr_time[i]){
decision_trans$queue_length[i] = decision_trans$queue_length[i] +1
if (decision_trans$queue_length[i] > 5){
decision_trans$perchase_or_not[i] = FALSE
decision_trans$service_interval[i] = 0
decision_trans$service_end_time[i] = 0
decision_trans$queue_length[i] = decision_trans$queue_length[i] - 1
pre_time = 0
for (j in 1:nrow(decision_trans)){
if (decision_trans$service_end_time[j]){
if (decision_trans$service_end_time[j]< pre_time){
decision_trans$service_end_time[j] = pre_time + decision_trans$service_interval[j]
}
pre_time = decision_trans$service_end_time[j]
}
}
}
}
}
}
}
return(decision_trans)
}
t_profit <- function(p, df){
cost = 2.68
profit = p - cost
customer = sum(df$perchase_or_not)
total_profit = profit * customer
return(total_profit)
}
t_revenue <- function(p, df){
cost = 2.68
customer = sum(df$perchase_or_not)
total_revenue = p * customer
return(total_revenue)
}
# function to see the total_customer
t_customer <- function(p, df){
return(sum(t_customer$perchase_or_not))
}
return(t_revenue(p, df))
# get each points price by apply mutiple functions call
result <- lapply(seq(from=2.68, to=10.72, by=0.01), t_p)
result <-unlist(result)
profit <- data.frame(seq(from=2.68, to=10.72, by=0.01), result)
t_r <- function(p){
df = d_trans(p)
return(t_revenue(p, df))
}
# get each points price by apply mutiple functions call
result <- lapply(seq(from=2.68, to=10.72, by=0.01), t_r)
result <-unlist(result)
profit <- data.frame(seq(from=2.68, to=10.72, by=0.01), result)
colnames(profit) <- c("price", 'total_profit')
colnames(profit) <- c("price", 'total_revenue')
View(profit)
library(ggplot2)
ggplot(profit, aes(x = price, y = total_revenue)) + geom_point(size = 1, color = 'lightblue')
View(profit)
### test the function
decision_trans = d_trans(5.5)
print(t_profit(7, decision_trans))
print(t_revenue(7, decision_trans))
View(decision_trans)
service_time
